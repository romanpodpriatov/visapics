# face_analyzer_basic.py
# –ë–ê–ó–û–í–´–ô –ü–û–î–•–û–î: –°–Ω–∞—á–∞–ª–∞ –ø–æ–º–µ—â–∞–µ–º –≥–æ–ª–æ–≤—É —Ü–µ–ª–∏–∫–æ–º, –ø–æ—Ç–æ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º

import logging
import numpy as np
from photo_specs import PhotoSpecification

class BasicFaceAnalyzer:
    """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä - —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ"""
    
    def __init__(self, landmarks, img_height, img_width):
        self.landmarks = landmarks
        self.img_height = img_height
        self.img_width = img_width
    
    def get_face_bbox(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤–æ–∫—Ä—É–≥ –í–°–ï–• —Ç–æ—á–µ–∫ –ª–∏—Ü–∞"""
        # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —Ç–æ—á–∫–∏
        all_points = []
        for landmark in self.landmarks.landmark:
            x = landmark.x * self.img_width
            y = landmark.y * self.img_height
            all_points.append((x, y))
        
        # –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã
        xs = [p[0] for p in all_points]
        ys = [p[1] for p in all_points]
        
        min_x = min(xs)
        max_x = max(xs)
        min_y = min(ys)
        max_y = max(ys)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ë–û–õ–¨–®–û–ô –∑–∞–ø–∞—Å —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω
        width = max_x - min_x
        height = max_y - min_y
        
        # 30% –∑–∞–ø–∞—Å —Å–≤–µ—Ä—Ö—É –¥–ª—è –≤–æ–ª–æ—Å, 10% —Å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
        margin_top = height * 0.3
        margin_bottom = height * 0.1
        margin_sides = width * 0.1
        
        return {
            'left': min_x - margin_sides,
            'right': max_x + margin_sides,
            'top': min_y - margin_top,
            'bottom': max_y + margin_bottom,
            'width': (max_x - min_x) + 2 * margin_sides,
            'height': (max_y - min_y) + margin_top + margin_bottom,
            'center_x': (min_x + max_x) / 2,
            'center_y': (min_y + max_y) / 2
        }
    
    def get_eye_level(self):
        """–ù–∞–π—Ç–∏ —É—Ä–æ–≤–µ–Ω—å –≥–ª–∞–∑"""
        # –¢–æ—á–∫–∏ –≥–ª–∞–∑ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        eye_indices = [33, 133, 362, 263]
        eye_ys = []
        
        for idx in eye_indices:
            if idx < len(self.landmarks.landmark):
                y = self.landmarks.landmark[idx].y * self.img_height
                eye_ys.append(y)
        
        return np.mean(eye_ys) if eye_ys else None


def calculate_basic_crop(face_landmarks, img_height: int, img_width: int, photo_spec: PhotoSpecification):
    """
    –ë–ê–ó–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–º–µ—â–∞–µ–º –≤—Å—é –≥–æ–ª–æ–≤—É
    
    –®–∞–≥ 1: –í–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ–≤—É —Ü–µ–ª–∏–∫–æ–º
    –®–∞–≥ 2: –ú–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ–º –º–∞—Å—à—Ç–∞–± –≤ —Ä–∞–º–∫–∞—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    """
    
    analyzer = BasicFaceAnalyzer(face_landmarks, img_height, img_width)
    face_bbox = analyzer.get_face_bbox()
    eye_level = analyzer.get_eye_level()
    
    # –¶–µ–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    target_width = photo_spec.photo_width_px
    target_height = photo_spec.photo_height_px
    
    logging.info(f"üéØ –ë–ê–ó–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú")
    logging.info(f"   –õ–∏—Ü–æ —Å –∑–∞–ø–∞—Å–∞–º–∏: {face_bbox['width']:.1f} x {face_bbox['height']:.1f}px")
    logging.info(f"   –¶–µ–ª–µ–≤–æ–µ —Ñ–æ—Ç–æ: {target_width} x {target_height}px")
    
    # –®–ê–ì 1: –í–ü–ò–°–´–í–ê–ï–ú –ì–û–õ–û–í–£ –¶–ï–õ–ò–ö–û–ú
    # –ú–∞—Å—à—Ç–∞–±, —á—Ç–æ–±—ã –≥–æ–ª–æ–≤–∞ –ø–æ–º–µ—Å—Ç–∏–ª–∞—Å—å –ø–æ –æ–±–µ–∏–º –æ—Å—è–º
    scale_by_width = target_width / face_bbox['width']
    scale_by_height = target_height / face_bbox['height']
    
    # –ë–µ—Ä–µ–º –ú–ï–ù–¨–®–ò–ô –º–∞—Å—à—Ç–∞–± - –≥–∞—Ä–∞–Ω—Ç–∏—è —á—Ç–æ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è
    initial_scale = min(scale_by_width, scale_by_height)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 10% –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
    safe_scale = initial_scale * 0.9
    
    logging.info(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±: {safe_scale:.3f} (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–º–µ—â–∞–µ—Ç—Å—è)")
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
    scaled_bbox = {
        'left': face_bbox['left'] * safe_scale,
        'right': face_bbox['right'] * safe_scale,
        'top': face_bbox['top'] * safe_scale,
        'bottom': face_bbox['bottom'] * safe_scale,
        'width': face_bbox['width'] * safe_scale,
        'height': face_bbox['height'] * safe_scale,
        'center_x': face_bbox['center_x'] * safe_scale,
        'center_y': face_bbox['center_y'] * safe_scale
    }
    
    # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
    crop_center_x = scaled_bbox['center_x']
    crop_center_y = scaled_bbox['center_y']
    
    crop_left = crop_center_x - target_width / 2
    crop_top = crop_center_y - target_height / 2
    crop_right = crop_left + target_width
    crop_bottom = crop_top + target_height
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≥–ª–∞–∑
    eye_from_crop_top = None
    
    # –®–ê–ì 2: –ü–†–û–í–ï–†–Ø–ï–ú –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ò –û–ü–¢–ò–ú–ò–ó–ò–†–£–ï–ú
    if eye_level is not None:
        scaled_eye_level = eye_level * safe_scale
        eye_from_crop_top = scaled_eye_level - crop_top
        eye_from_bottom = target_height - eye_from_crop_top
        
        logging.info(f"   –ì–ª–∞–∑–∞ –æ—Ç –Ω–∏–∑–∞: {eye_from_bottom:.1f}px")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≥–ª–∞–∑–∞–º
        if photo_spec.eye_min_from_bottom_px and photo_spec.eye_max_from_bottom_px:
            target_eye_from_bottom = (photo_spec.eye_min_from_bottom_px + photo_spec.eye_max_from_bottom_px) / 2
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –í–°–ï–ì–î–ê, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≥–ª–∞–∑–∞–º
            eye_adjustment = target_eye_from_bottom - eye_from_bottom
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É
            crop_top += eye_adjustment
            crop_bottom += eye_adjustment
            
            logging.info(f"   –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –≥–ª–∞–∑: —Å–¥–≤–∏–≥ –Ω–∞ {eye_adjustment:.1f}px")
            logging.info(f"   –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≥–ª–∞–∑: {target_eye_from_bottom:.1f}px")
    
    # –®–ê–ì 3: –ü–†–û–ë–£–ï–ú –£–í–ï–õ–ò–ß–ò–¢–¨ –ú–ê–°–®–¢–ê–ë
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É –≥–æ–ª–æ–≤—ã (–±–µ–∑ –º–∞—Ä–≥–∏–Ω–æ–≤)
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –≤—ã—Å–æ—Ç—É –ª–∏—Ü–∞ –±–µ–∑ –º–∞—Ä–≥–∏–Ω–æ–≤
    raw_face_height = face_bbox['height'] / 1.4  # –£–±–∏—Ä–∞–µ–º 30% —Å–≤–µ—Ä—Ö—É –∏ 10% —Å–Ω–∏–∑—É
    scaled_raw_face_height = raw_face_height * safe_scale
    face_height_in_photo = scaled_bbox['height']
    
    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞–∑–º–µ—Ä—É –≥–æ–ª–æ–≤—ã
    min_head_height = photo_spec.head_min_px
    max_head_height = photo_spec.head_max_px
    
    if face_height_in_photo < min_head_height:
        # –ù—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å
        needed_scale = min_head_height / face_height_in_photo
        new_scale = safe_scale * needed_scale
        
        logging.info(f"   –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –¥–æ {new_scale:.3f} –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≥–æ–ª–æ–≤—ã")
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å –Ω–æ–≤—ã–º –º–∞—Å—à—Ç–∞–±–æ–º
        safe_scale = new_scale
        
        # –ü–µ—Ä–µ—Å—á–µ—Ç scaled_bbox –∏ crop –ø–æ–∑–∏—Ü–∏–π...
        scaled_bbox = {
            'left': face_bbox['left'] * safe_scale,
            'right': face_bbox['right'] * safe_scale,
            'top': face_bbox['top'] * safe_scale,
            'bottom': face_bbox['bottom'] * safe_scale,
            'width': face_bbox['width'] * safe_scale,
            'height': face_bbox['height'] * safe_scale,
            'center_x': face_bbox['center_x'] * safe_scale,
            'center_y': face_bbox['center_y'] * safe_scale
        }
        
        # –ü–µ—Ä–µ–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –≥–ª–∞–∑–∞–º
        if eye_level is not None and photo_spec.eye_min_from_bottom_px and photo_spec.eye_max_from_bottom_px:
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≥–ª–∞–∑ —Å –Ω–æ–≤—ã–º –º–∞—Å—à—Ç–∞–±–æ–º
            scaled_eye_level = eye_level * safe_scale
            target_eye_from_bottom = (photo_spec.eye_min_from_bottom_px + photo_spec.eye_max_from_bottom_px) / 2
            target_eye_from_top = target_height - target_eye_from_bottom
            
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ –≥–ª–∞–∑–∞–º
            crop_top = scaled_eye_level - target_eye_from_top
            crop_bottom = crop_top + target_height
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≥–ª–∞–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–µ–∑–∫–∏
            eye_from_crop_top = scaled_eye_level - crop_top
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ X
            crop_center_x = scaled_bbox['center_x']
            crop_left = crop_center_x - target_width / 2
            crop_right = crop_left + target_width
            
            logging.info(f"   –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≥–ª–∞–∑–∞–º –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
            crop_center_x = scaled_bbox['center_x']
            crop_center_y = scaled_bbox['center_y']
            
            crop_left = crop_center_x - target_width / 2
            crop_top = crop_center_y - target_height / 2
            crop_right = crop_left + target_width
            crop_bottom = crop_top + target_height
    
    # –§–ò–ù–ê–õ–¨–ù–ê–Ø –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    scaled_img_width = img_width * safe_scale
    scaled_img_height = img_height * safe_scale
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
    if crop_left < 0:
        shift = -crop_left
        crop_left = 0
        crop_right = target_width
        logging.warning(f"–°–¥–≤–∏–≥ –≤–ø—Ä–∞–≤–æ –Ω–∞ {shift:.1f}px")
    
    if crop_right > scaled_img_width:
        shift = crop_right - scaled_img_width
        crop_right = scaled_img_width
        crop_left = crop_right - target_width
        logging.warning(f"–°–¥–≤–∏–≥ –≤–ª–µ–≤–æ –Ω–∞ {shift:.1f}px")
    
    if crop_top < 0:
        shift = -crop_top
        crop_top = 0
        crop_bottom = target_height
        logging.warning(f"–°–¥–≤–∏–≥ –≤–Ω–∏–∑ –Ω–∞ {shift:.1f}px")
    
    if crop_bottom > scaled_img_height:
        shift = crop_bottom - scaled_img_height
        crop_bottom = scaled_img_height
        crop_top = crop_bottom - target_height
        logging.warning(f"–°–¥–≤–∏–≥ –≤–≤–µ—Ä—Ö –Ω–∞ {shift:.1f}px")
    
    # –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
    final_head_in_frame = (
        scaled_bbox['top'] >= crop_top - 5 and  # –î–æ–ø—É—Å–∫ 5px
        scaled_bbox['bottom'] <= crop_bottom + 5 and
        scaled_bbox['left'] >= crop_left - 5 and
        scaled_bbox['right'] <= crop_right + 5
    )
    
    if final_head_in_frame:
        logging.info("‚úÖ –ì–æ–ª–æ–≤–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –∫–∞–¥—Ä!")
    else:
        logging.warning("‚ö†Ô∏è –ß–∞—Å—Ç—å –≥–æ–ª–æ–≤—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω–∞")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞
        if not final_head_in_frame:
            safe_scale *= 0.85
            logging.warning(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –º–∞—Å—à—Ç–∞–± –¥–æ {safe_scale:.3f}")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ –∑–∞–Ω–æ–≤–æ —Å –º–µ–Ω—å—à–∏–º –º–∞—Å—à—Ç–∞–±–æ–º
    
    logging.info(f"üìê –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±: {safe_scale:.3f}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –≥–æ–ª–æ–≤—ã –±–µ–∑ –º–∞—Ä–≥–∏–Ω–æ–≤
    final_raw_face_height = face_bbox['height'] / 1.4 * safe_scale
    
    return {
        'scale_factor': float(safe_scale),
        'crop_top': int(round(crop_top)),
        'crop_bottom': int(round(crop_bottom)),
        'crop_left': int(round(crop_left)),
        'crop_right': int(round(crop_right)),
        'final_photo_width_px': target_width,
        'final_photo_height_px': target_height,
        'achieved_head_height_px': int(round(final_raw_face_height)),
        'achieved_eye_level_from_top_px': int(round(eye_from_crop_top)) if eye_level else 0,
        'positioning_success': final_head_in_frame
    }


