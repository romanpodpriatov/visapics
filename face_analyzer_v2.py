# face_analyzer_v2.py
# –ù–û–í–´–ô –ü–û–î–•–û–î: –ü—Ä–æ—Å—Ç–æ–π, –Ω–∞–¥–µ–∂–Ω—ã–π, –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–π

import logging
import numpy as np
from photo_specs import PhotoSpecification

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫ - —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ
ESSENTIAL_FACE_POINTS = {
    'forehead': [10, 151, 9],      # –í–µ—Ä—Ö –ª–±–∞
    'eyes': [33, 133, 362, 263],   # –¶–µ–Ω—Ç—Ä—ã –≥–ª–∞–∑
    'nose_tip': [1, 2],            # –ö–æ–Ω—á–∏–∫ –Ω–æ—Å–∞
    'chin': [152, 175],            # –ù–∏–∑ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞
    'face_outline': [10, 338, 297, 332, 284, 251, 389, 356, 454, 323, 361, 288, 
                     397, 365, 379, 378, 400, 377, 152, 148, 176, 149, 150, 136, 
                     172, 58, 132, 93, 234, 127, 162, 21, 54, 103, 67, 109]
}

class SimpleFaceAnalyzer:
    """–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ª–∏—Ü–∞"""
    
    def __init__(self, landmarks, img_height, img_width):
        self.landmarks = landmarks
        self.img_height = img_height
        self.img_width = img_width
    
    def get_face_bounds(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Ü–∞ —Å –∑–∞–ø–∞—Å–æ–º –Ω–∞ –≤–æ–ª–æ—Å—ã"""
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –∫—Ä–∞–π–Ω–∏–µ —Ç–æ—á–∫–∏
        all_x = []
        all_y = []
        
        for i, landmark in enumerate(self.landmarks.landmark):
            x = landmark.x * self.img_width
            y = landmark.y * self.img_height
            all_x.append(x)
            all_y.append(y)
        
        # –ë–∞–∑–æ–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        face_left = min(all_x)
        face_right = max(all_x)
        face_bottom = max(all_y)
        
        # –î–ª—è –≤–µ—Ä—Ö–∞ –±–µ—Ä–µ–º –º–∏–Ω–∏–º—É–º –∏–∑ —Ç–æ—á–µ–∫ –ª–±–∞
        forehead_points = []
        for idx in ESSENTIAL_FACE_POINTS['forehead']:
            if idx < len(self.landmarks.landmark):
                y = self.landmarks.landmark[idx].y * self.img_height
                forehead_points.append(y)
        
        if forehead_points:
            forehead_top = min(forehead_points)
        else:
            forehead_top = min(all_y)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: Landmark 10 —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –≤–æ–ª–æ—Å—ã (—ç—Ç–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –≤–µ—Ä—Ö –≥–æ–ª–æ–≤—ã)
        # –ü–æ—ç—Ç–æ–º—É –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π hair_margin
        # –¢–æ–ª—å–∫–æ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ forehead_top –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–Ω–∏–µ–π —Ä–æ—Å—Ç–∞ –≤–æ–ª–æ—Å
        forehead_skin_landmarks = [151, 9]  # –ò—Å–∫–ª—é—á–∞–µ–º landmark 10
        forehead_skin_points = []
        for idx in forehead_skin_landmarks:
            if idx < len(self.landmarks.landmark):
                y = self.landmarks.landmark[idx].y * self.img_height
                forehead_skin_points.append(y)
        
        if forehead_skin_points:
            forehead_skin_top = min(forehead_skin_points)
            # Landmark 10 vs forehead skin - –≤—ã–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º—É–º (—Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –≤–µ—Ä—Ö)
            actual_head_top = min(forehead_top, forehead_skin_top)
            # –ï—Å–ª–∏ landmark 10 —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤—ã—à–µ –ª–∏–Ω–∏–∏ –ª–±–∞, —Ç–æ —ç—Ç–æ —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –≤–æ–ª–æ—Å—ã
            if forehead_top < forehead_skin_top - 20:  # 20px —Ä–∞–∑–Ω–∏—Ü–∞
                hair_margin = 0  # Landmark 10 —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –≤–æ–ª–æ—Å—ã
                estimated_head_top = forehead_top
            else:
                # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –Ω–µ–±–æ–ª—å—à–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
                face_height = face_bottom - forehead_skin_top
                hair_margin = face_height * 0.10  # –¢–æ–ª—å–∫–æ 10% –∑–∞–ø–∞—Å
                estimated_head_top = forehead_top - hair_margin
        else:
            # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ç–æ—á–∫–∏
            hair_margin = 0  # Landmark 10 —É–∂–µ –Ω–∞ –º–∞–∫—É—à–∫–µ
            estimated_head_top = forehead_top
        
        # –ì–ª–∞–∑–∞
        eye_points = []
        for idx in ESSENTIAL_FACE_POINTS['eyes']:
            if idx < len(self.landmarks.landmark):
                y = self.landmarks.landmark[idx].y * self.img_height
                eye_points.append(y)
        
        eye_level = np.mean(eye_points) if eye_points else (forehead_top + face_bottom) / 2
        
        return {
            'head_top': estimated_head_top,      # –° —É—á–µ—Ç–æ–º –≤–æ–ª–æ—Å!
            'forehead_top': forehead_top,
            'eye_level': eye_level,
            'chin_bottom': face_bottom,
            'face_left': face_left,
            'face_right': face_right,
            'face_center_x': (face_left + face_right) / 2,
            'face_height_with_hair': face_bottom - estimated_head_top,
            'face_height_visible': face_bottom - forehead_top,
            'hair_margin': hair_margin
        }


def calculate_simple_crop_dimensions(face_landmarks, img_height: int, img_width: int, photo_spec: PhotoSpecification):
    """
    –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú: –ë–æ–ª–µ–µ —Ä–æ–±–∞—Å—Ç–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.
    
    –ü—Ä–∏–Ω—Ü–∏–ø—ã:
    1. –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫ —Ä–∞–∑–º–µ—Ä—É –≥–æ–ª–æ–≤—ã.
    2. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è > –≥–ª–∞–∑–∞ > –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
    3. –ì–∞—Ä–∞–Ω—Ç–∏—è, —á—Ç–æ –≥–æ–ª–æ–≤–∞ –Ω–µ –æ–±—Ä–µ–∑–∞–Ω–∞ –∏ –µ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã.
    4. –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
    """
    
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ SimpleFaceAnalyzer.get_face_bounds() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ö–û–†–†–ï–ö–¢–ù–´–ï
    # bounds['head_top'] (—Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –≤–µ—Ä—Ö –≥–æ–ª–æ–≤—ã) –∏ 
    # bounds['face_height_with_hair'] (—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞ –≥–æ–ª–æ–≤—ã).
    analyzer = SimpleFaceAnalyzer(face_landmarks, img_height, img_width)
    bounds = analyzer.get_face_bounds()
    
    logging.info(f"üéØ –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú - –ò—Å—Ö–æ–¥–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Ü–∞ (–¥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è):")
    logging.info(f"   –í–µ—Ä—Ö –≥–æ–ª–æ–≤—ã (head_top): {bounds['head_top']:.1f}px")
    logging.info(f"   –ù–∏–∑ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞ (chin_bottom): {bounds['chin_bottom']:.1f}px")
    logging.info(f"   –í—ã—Å–æ—Ç–∞ –ª–∏—Ü–∞ —Å –≤–æ–ª–æ—Å–∞–º–∏ (face_height_with_hair): {bounds['face_height_with_hair']:.1f}px")
    logging.info(f"   –í–∏–¥–∏–º–∞—è –≤—ã—Å–æ—Ç–∞ –ª–∏—Ü–∞ (face_height_visible): {bounds['face_height_visible']:.1f}px")
    logging.info(f"   –¶–µ–Ω—Ç—Ä –ª–∏—Ü–∞ X: {bounds['face_center_x']:.1f}px")
    logging.info(f"   –£—Ä–æ–≤–µ–Ω—å –≥–ª–∞–∑: {bounds['eye_level']:.1f}px")

    target_width = photo_spec.photo_width_px
    target_height = photo_spec.photo_height_px

    # –®–ê–ì 1: –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ú–ê–°–®–¢–ê–ë–ê
    # –¶–µ–ª—å: –≥–æ–ª–æ–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [head_min_px, head_max_px]
    # –∏ —É–º–µ—â–∞—Ç—å—Å—è –≤ –∫–∞–¥—Ä.

    if bounds['face_height_with_hair'] <= 0: # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        logging.error("–û—à–∏–±–∫–∞: –í—ã—Å–æ—Ç–∞ –≥–æ–ª–æ–≤—ã —Å –≤–æ–ª–æ—Å–∞–º–∏ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Å—à—Ç–∞–±.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º "–Ω–µ—É–¥–∞—á–Ω—ã–π" —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        return {
            'scale_factor': 0, 'crop_top': 0, 'crop_bottom': target_height, 
            'crop_left': 0, 'crop_right': target_width,
            'final_photo_width_px': target_width, 'final_photo_height_px': target_height,
            'achieved_head_height_px': 0, 'achieved_eye_level_from_top_px': 0,
            'positioning_success': False, 'warnings': ["–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –≥–æ–ª–æ–≤—ã."]
        }

    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Ü–µ–ª–∏—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω—É –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ä–∞–∑–º–µ—Ä–∞ –≥–æ–ª–æ–≤—ã
    ideal_target_head_photo_px = (photo_spec.head_min_px + photo_spec.head_max_px) / 2.0
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ü–µ–ª—å—é –≤ —Ä–∞–º–∫–∞—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    target_head_photo_px = max(photo_spec.head_min_px, min(ideal_target_head_photo_px, photo_spec.head_max_px))
    
    scale_factor = target_head_photo_px / bounds['face_height_with_hair']
    logging.info(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≥–æ–ª–æ–≤—ã ({target_head_photo_px:.1f}px): {scale_factor:.3f}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —à–∏—Ä–æ–∫–∏–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª–∏—Ü–æ
    face_pixel_width = bounds['face_right'] - bounds['face_left']
    if face_pixel_width * scale_factor > target_width * 0.98: # –û—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω 1% –æ—Ç—Å—Ç—É–ø–∞ —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        new_scale_factor = (target_width * 0.98) / face_pixel_width
        logging.info(f"   –ú–∞—Å—à—Ç–∞–± —É–º–µ–Ω—å—à–µ–Ω —Å {scale_factor:.3f} –¥–æ {new_scale_factor:.3f} —á—Ç–æ–±—ã –ª–∏—Ü–æ –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å –ø–æ —à–∏—Ä–∏–Ω–µ.")
        scale_factor = new_scale_factor

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –≤—ã—Å–æ–∫–æ–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–æ–ª–æ–≤–∞ –¥–ª—è —Å–∞–º–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    if bounds['face_height_with_hair'] * scale_factor > target_height * 0.98: # –û—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω 1% –æ—Ç—Å—Ç—É–ø–∞ —Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É –¥–ª—è –≤—Å–µ–π –≥–æ–ª–æ–≤—ã
        new_scale_factor = (target_height * 0.98) / bounds['face_height_with_hair']
        logging.info(f"   –ú–∞—Å—à—Ç–∞–± —É–º–µ–Ω—å—à–µ–Ω —Å {scale_factor:.3f} –¥–æ {new_scale_factor:.3f} —á—Ç–æ–±—ã –≥–æ–ª–æ–≤–∞ –ø–æ–º–µ—Å—Ç–∏–ª–∞—Å—å –ø–æ –≤—ã—Å–æ—Ç–µ —Ñ–æ—Ç–æ.")
        scale_factor = new_scale_factor
        
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∞, —á—Ç–æ–±—ã –≥–æ–ª–æ–≤–∞ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∞ min/max —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    current_scaled_head_height = bounds['face_height_with_hair'] * scale_factor
    if current_scaled_head_height < photo_spec.head_min_px:
        logging.warning(f"   –ú–∞—Å—à—Ç–∞–± {scale_factor:.3f} –¥–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫—É—é –≥–æ–ª–æ–≤—É ({current_scaled_head_height:.1f}px). –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ min ({photo_spec.head_min_px}px).")
        scale_factor = photo_spec.head_min_px / bounds['face_height_with_hair']
    elif current_scaled_head_height > photo_spec.head_max_px:
        logging.warning(f"   –ú–∞—Å—à—Ç–∞–± {scale_factor:.3f} –¥–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à—É—é –≥–æ–ª–æ–≤—É ({current_scaled_head_height:.1f}px). –£–º–µ–Ω—å—à–∞–µ–º –¥–æ max ({photo_spec.head_max_px}px).")
        scale_factor = photo_spec.head_max_px / bounds['face_height_with_hair']

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±
    min_allowed_scale, max_allowed_scale = 0.25, 3.0 # –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    if scale_factor < min_allowed_scale:
        logging.warning(f"   –ò—Ç–æ–≥–æ–≤—ã–π –º–∞—Å—à—Ç–∞–± {scale_factor:.3f} —Å–ª–∏—à–∫–æ–º –º–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º {min_allowed_scale}.")
        scale_factor = min_allowed_scale
    elif scale_factor > max_allowed_scale:
        logging.warning(f"   –ò—Ç–æ–≥–æ–≤—ã–π –º–∞—Å—à—Ç–∞–± {scale_factor:.3f} —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º {max_allowed_scale}.")
        scale_factor = max_allowed_scale
    
    final_head_height_px = bounds['face_height_with_hair'] * scale_factor
    final_head_height_mm = final_head_height_px / photo_spec.dpi * 25.4
    
    logging.info(f"üìè –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ: {scale_factor:.3f}")
    logging.info(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–∞—Å—á–µ—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –≥–æ–ª–æ–≤—ã: {final_head_height_px:.1f}px ({final_head_height_mm:.1f}mm)")
    logging.info(f"   –¢—Ä–µ–±—É–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {photo_spec.head_min_px}px-{photo_spec.head_max_px}px ({photo_spec.head_min_px/photo_spec.dpi*25.4:.1f}mm-{photo_spec.head_max_px/photo_spec.dpi*25.4:.1f}mm)")

    # –®–ê–ì 2: –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –ö–û–û–†–î–ò–ù–ê–¢
    scaled_head_top = bounds['head_top'] * scale_factor
    scaled_chin_bottom = bounds['chin_bottom'] * scale_factor
    scaled_eye_level = bounds['eye_level'] * scale_factor
    scaled_face_center_x = bounds['face_center_x'] * scale_factor

    # –®–ê–ì 3: –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï (–í–ï–†–¢–ò–ö–ê–õ–¨–ù–û–ï)
    crop_top_y = 0 # Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
    min_head_margin_px = getattr(photo_spec, 'min_visual_head_margin_px', 5)
    min_chin_margin_px = getattr(photo_spec, 'min_visual_chin_margin_px', 5)

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:
    # 1. –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é –≤–µ—Ä—Ö–∞ –≥–æ–ª–æ–≤—ã (head_top_dist_from_photo_top)
    # 2. –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—é –≥–ª–∞–∑ (eye_level_from_bottom)
    # 3. –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    positioned_by = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"

    if hasattr(photo_spec, 'head_top_min_dist_from_photo_top_px') and \
       hasattr(photo_spec, 'head_top_max_dist_from_photo_top_px') and \
       photo_spec.head_top_min_dist_from_photo_top_px is not None and \
       photo_spec.head_top_max_dist_from_photo_top_px is not None:
        # –¶–µ–ª—å - —Å–µ—Ä–µ–¥–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç—Å—Ç—É–ø–∞ –≤–µ—Ä—Ö–∞ –≥–æ–ª–æ–≤—ã –æ—Ç –≤–µ—Ä—Ö–∞ —Ñ–æ—Ç–æ
        target_head_dist_from_top = (photo_spec.head_top_min_dist_from_photo_top_px + 
                                     photo_spec.head_top_max_dist_from_photo_top_px) / 2.0
        crop_top_y = scaled_head_top - target_head_dist_from_top
        positioned_by = f"—Å–ø–µ—Ü. –æ—Ç—Å—Ç—É–ø—É –≤–µ—Ä—Ö–∞ –≥–æ–ª–æ–≤—ã ({target_head_dist_from_top:.1f}px)"
        logging.info(f"   –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ {positioned_by}.")
    
    elif photo_spec.eye_min_from_bottom_px is not None and \
         photo_spec.eye_max_from_bottom_px is not None:
        # –¶–µ–ª—å - —Å–µ—Ä–µ–¥–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —É—Ä–æ–≤–Ω—è –≥–ª–∞–∑ –æ—Ç –Ω–∏–∑–∞ —Ñ–æ—Ç–æ
        target_eye_from_bottom = (photo_spec.eye_min_from_bottom_px + photo_spec.eye_max_from_bottom_px) / 2.0
        target_eye_from_top_photo = target_height - target_eye_from_bottom
        crop_top_y = scaled_eye_level - target_eye_from_top_photo
        positioned_by = f"—É—Ä–æ–≤–Ω—é –≥–ª–∞–∑ ({target_eye_from_bottom:.1f}px –æ—Ç –Ω–∏–∑–∞)"
        logging.info(f"   –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ {positioned_by}.")

    else:
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        default_head_top_margin_percent = getattr(photo_spec, 'default_head_top_margin_percent', 0.12)
        default_top_margin = target_height * default_head_top_margin_percent
        effective_top_margin = max(min_head_margin_px, default_top_margin)
        crop_top_y = scaled_head_top - effective_top_margin
        positioned_by = f"–æ—Ç—Å—Ç—É–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ({effective_top_margin:.1f}px —Å–≤–µ—Ä—Ö—É)"
        logging.info(f"   –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ {positioned_by}.")

    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è crop_top_y, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –≥–æ–ª–æ–≤—ã
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ö–∞ –≥–æ–ª–æ–≤—ã
    if scaled_head_top - crop_top_y < min_head_margin_px:
        new_crop_top_y = scaled_head_top - min_head_margin_px
        logging.warning(f"   –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–µ—Ä—Ö–∞: crop_top_y –∏–∑–º–µ–Ω–µ–Ω —Å {crop_top_y:.1f} –Ω–∞ {new_crop_top_y:.1f} –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –º–∏–Ω. –æ—Ç—Å—Ç—É–ø–∞ –≥–æ–ª–æ–≤—ã ({min_head_margin_px}px). –ò—Å—Ö–æ–¥–Ω—ã–π –º–µ—Ç–æ–¥: {positioned_by}.")
        crop_top_y = new_crop_top_y
        positioned_by += " + –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–µ—Ä—Ö–∞ –≥–æ–ª–æ–≤—ã"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∑–∞ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞
    if (scaled_chin_bottom - crop_top_y) > (target_height - min_chin_margin_px):
        new_crop_top_y = scaled_chin_bottom - (target_height - min_chin_margin_px)
        # –≠—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –º–æ–∂–µ—Ç –ø–æ–¥–Ω—è—Ç—å –≥–æ–ª–æ–≤—É —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ. –ü—Ä–æ–≤–µ—Ä–∏–º —ç—Ç–æ.
        if scaled_head_top - new_crop_top_y < min_head_margin_px:
            # –ö–æ–Ω—Ñ–ª–∏–∫—Ç: –Ω–µ –º–æ–∂–µ–º —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –∏ –æ—Ç—Å—Ç—É–ø –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞, –∏ –æ—Ç—Å—Ç—É–ø –≥–æ–ª–æ–≤—ã.
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –Ω–µ –æ–±—Ä–µ–∑–∞—Ç—å –≥–æ–ª–æ–≤—É —Å–≤–µ—Ä—Ö—É.
            crop_top_y_alt = scaled_head_top - min_head_margin_px
            logging.warning(f"   –ö–æ–Ω—Ñ–ª–∏–∫—Ç –æ—Ç—Å—Ç—É–ø–æ–≤! –ü–æ–ø—ã—Ç–∫–∞ —Å–¥–≤–∏–Ω—É—Ç—å crop_top_y –¥–ª—è –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞ ({new_crop_top_y:.1f}) –Ω–∞—Ä—É—à–∞–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø –≥–æ–ª–æ–≤—ã. "
                            f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ—Ç—Å—Ç—É–ø–∞. crop_top_y –æ—Å—Ç–∞–µ—Ç—Å—è {crop_top_y_alt:.1f}.")
            crop_top_y = scaled_head_top - min_head_margin_px # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–µ—Ä—Ö–∞
            if (scaled_chin_bottom - crop_top_y) > (target_height - min_chin_margin_px):
                 logging.warning(f"   –ü–æ–¥–±–æ—Ä–æ–¥–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∏–∂–Ω–µ–º—É –∫—Ä–∞—é –∏–ª–∏ –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –æ—Ç—Å—Ç—É–ø–æ–≤.")
            positioned_by += " + –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –ø–æ–¥–±–æ—Ä–æ–¥–∫–æ–º"

        else: # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞
            logging.warning(f"   –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∏–∑–∞: crop_top_y –∏–∑–º–µ–Ω–µ–Ω —Å {crop_top_y:.1f} –Ω–∞ {new_crop_top_y:.1f} –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –º–∏–Ω. –æ—Ç—Å—Ç—É–ø–∞ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞ ({min_chin_margin_px}px). –ò—Å—Ö–æ–¥–Ω—ã–π –º–µ—Ç–æ–¥: {positioned_by}.")
            crop_top_y = new_crop_top_y
            positioned_by += " + –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∏–∑–∞ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞"

    # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    crop_left_x = scaled_face_center_x - (target_width / 2)

    # –®–ê–ì 4: –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê –ì–†–ê–ù–ò–¶ –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–û –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ù–û–ì–û –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
    scaled_img_height = img_height * scale_factor
    scaled_img_width = img_width * scale_factor
    
    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ (–µ—Å–ª–∏ –∫—Ä–æ–ø –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    if crop_top_y < 0:
        logging.warning(f"   –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∑–∞ –í–ï–†–•: crop_top_y –±—ã–ª {crop_top_y:.1f}, —Å—Ç–∞–ª 0.")
        crop_top_y = 0
    if crop_top_y + target_height > scaled_img_height:
        new_top = scaled_img_height - target_height
        logging.warning(f"   –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∑–∞ –ù–ò–ó: crop_top_y –±—ã–ª {crop_top_y:.1f}, —Å—Ç–∞–ª {new_top:.1f}.")
        crop_top_y = new_top
        if crop_top_y < 0 : # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –º–µ–Ω—å—à–µ —á–µ–º crop_height, —Ñ–æ—Ç–æ –±—É–¥–µ—Ç —Å–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –≤–≤–µ—Ä—Ö—É
             logging.warning(f"   –§–æ—Ç–æ –º–µ–Ω—å—à–µ —á–µ–º –≤—ã—Å–æ—Ç–∞ –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è, crop_top_y —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0 –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ù–ò–ó.")
             crop_top_y = 0

    # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
    if crop_left_x < 0:
        logging.warning(f"   –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∑–∞ –õ–ï–í–´–ô –ö–†–ê–ô: crop_left_x –±—ã–ª {crop_left_x:.1f}, —Å—Ç–∞–ª 0.")
        crop_left_x = 0
    if crop_left_x + target_width > scaled_img_width:
        new_left = scaled_img_width - target_width
        logging.warning(f"   –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∑–∞ –ü–†–ê–í–´–ô –ö–†–ê–ô: crop_left_x –±—ã–ª {crop_left_x:.1f}, —Å—Ç–∞–ª {new_left:.1f}.")
        crop_left_x = new_left
        if crop_left_x < 0: # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –º–µ–Ω—å—à–µ —á–µ–º crop_width
            logging.warning(f"   –§–æ—Ç–æ –º–µ–Ω—å—à–µ —á–µ–º —à–∏—Ä–∏–Ω–∞ –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è, crop_left_x —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0 –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ü–†–ê–í–´–ô –ö–†–ê–ô.")
            crop_left_x = 0

    crop_bottom_y = crop_top_y + target_height
    crop_right_x = crop_left_x + target_width

    # –®–ê–ì 5: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –†–ï–ó–£–õ–¨–¢–ê–¢–´
    # –ü–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–∏—Ü–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –í–ï–†–•–ù–ï–ì–û –ö–†–ê–Ø –ö–ê–î–†–ê (crop_top_y)
    final_head_pos_from_crop_top = scaled_head_top - crop_top_y
    final_chin_pos_from_crop_top = scaled_chin_bottom - crop_top_y
    final_eye_pos_from_crop_top = scaled_eye_level - crop_top_y
    
    final_eye_pos_from_bottom_crop = target_height - final_eye_pos_from_crop_top
    
    # –†–µ–∞–ª—å–Ω–∞—è –≤–∏–¥–∏–º–∞—è –≤—ã—Å–æ—Ç–∞ –≥–æ–ª–æ–≤—ã –≤ –∫–∞–¥—Ä–µ
    visible_head_top_in_crop = max(0, final_head_pos_from_crop_top)
    visible_chin_bottom_in_crop = min(target_height, final_chin_pos_from_crop_top)
    achieved_head_height_px = max(0, visible_chin_bottom_in_crop - visible_head_top_in_crop)

    logging.info(f"üìç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞–¥—Ä–∞):")
    logging.info(f"   –í–µ—Ä—Ö –≥–æ–ª–æ–≤—ã –æ—Ç –≤–µ—Ä—Ö–∞ –∫–∞–¥—Ä–∞: {final_head_pos_from_crop_top:.1f}px ({final_head_pos_from_crop_top/target_height*100:.1f}%)")
    logging.info(f"   –ü–æ–¥–±–æ—Ä–æ–¥–æ–∫ –æ—Ç –≤–µ—Ä—Ö–∞ –∫–∞–¥—Ä–∞: {final_chin_pos_from_crop_top:.1f}px")
    logging.info(f"   –ì–ª–∞–∑–∞ –æ—Ç –≤–µ—Ä—Ö–∞ –∫–∞–¥—Ä–∞: {final_eye_pos_from_crop_top:.1f}px")
    logging.info(f"   –ì–ª–∞–∑–∞ –æ—Ç –Ω–∏–∑–∞ –∫–∞–¥—Ä–∞: {final_eye_pos_from_bottom_crop:.1f}px")
    logging.info(f"   –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è –≤–∏–¥–∏–º–∞—è –≤—ã—Å–æ—Ç–∞ –≥–æ–ª–æ–≤—ã –≤ –∫–∞–¥—Ä–µ: {achieved_head_height_px:.1f}px")

    success = True
    warnings = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤
    if final_head_pos_from_crop_top < min_head_margin_px - 0.5: # -0.5 –¥–ª—è —É—á–µ—Ç–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        warnings.append(f"‚ö†Ô∏è –ì–æ–ª–æ–≤–∞ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö–Ω–µ–º—É –∫—Ä–∞—é ({final_head_pos_from_crop_top:.1f}px < {min_head_margin_px}px)!")
    
    if final_chin_pos_from_crop_top > target_height - (min_chin_margin_px - 0.5):
        warnings.append(f"‚ö†Ô∏è –ü–æ–¥–±–æ—Ä–æ–¥–æ–∫ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∏–∂–Ω–µ–º—É –∫—Ä–∞—é –∏–ª–∏ –æ–±—Ä–µ–∑–∞–Ω ({final_chin_pos_from_crop_top:.1f}px –≤ –∫–∞–¥—Ä–µ –≤—ã—Å–æ—Ç–æ–π {target_height}px)!")
        success = False
    
    if final_chin_pos_from_crop_top <= visible_head_top_in_crop : # –ø–æ–¥–±–æ—Ä–æ–¥–æ–∫ –≤—ã—à–µ –º–∞–∫—É—à–∫–∏ –∏–ª–∏ –æ–Ω–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        warnings.append(f"‚ö†Ô∏è –ü–æ–¥–±–æ—Ä–æ–¥–æ–∫ –æ–±—Ä–µ–∑–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–æ–ª–æ–≤—ã!")
        success = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≥–æ–ª–æ–≤—ã
    if not (photo_spec.head_min_px <= achieved_head_height_px <= photo_spec.head_max_px):
        warnings.append(f"‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥–æ–ª–æ–≤—ã ({achieved_head_height_px:.1f}px) –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ({photo_spec.head_min_px}-{photo_spec.head_max_px}px).")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è –≥–ª–∞–∑
    if photo_spec.eye_min_from_bottom_px and photo_spec.eye_max_from_bottom_px:
        if not (photo_spec.eye_min_from_bottom_px <= final_eye_pos_from_bottom_crop <= photo_spec.eye_max_from_bottom_px):
            warnings.append(f"‚ö†Ô∏è –ì–ª–∞–∑–∞ ({final_eye_pos_from_bottom_crop:.1f}px) –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç –Ω–∏–∑–∞ ({photo_spec.eye_min_from_bottom_px}-{photo_spec.eye_max_from_bottom_px}px).")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–µ—Ä—Ö–∞ –≥–æ–ª–æ–≤—ã (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ)
    if hasattr(photo_spec, 'head_top_min_dist_from_photo_top_px') and \
       hasattr(photo_spec, 'head_top_max_dist_from_photo_top_px') and \
       photo_spec.head_top_min_dist_from_photo_top_px is not None and \
       photo_spec.head_top_max_dist_from_photo_top_px is not None:
        if not (photo_spec.head_top_min_dist_from_photo_top_px <= final_head_pos_from_crop_top <= photo_spec.head_top_max_dist_from_photo_top_px):
            warnings.append(f"‚ö†Ô∏è –í–µ—Ä—Ö –≥–æ–ª–æ–≤—ã ({final_head_pos_from_crop_top:.1f}px) –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç –≤–µ—Ä—Ö–∞ —Ñ–æ—Ç–æ ({photo_spec.head_top_min_dist_from_photo_top_px}-{photo_spec.head_top_max_dist_from_photo_top_px}px).")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —É—Å–ø–µ—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∏–±–æ–ª–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
    if not (photo_spec.head_min_px <= achieved_head_height_px <= photo_spec.head_max_px) or \
       final_chin_pos_from_crop_top > target_height + 1 or \
       final_head_pos_from_crop_top < -1 : # +1/-1 –ø–∏–∫—Å–µ–ª—å –Ω–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏
        success = False

    if warnings:
        logging.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for w in warnings:
            logging.warning(f"   {w}")
    if success:
        logging.info("‚úÖ –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logging.error("‚ùå –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ù–ï —É—Å–ø–µ—à–Ω–æ –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π.")

    return {
        'scale_factor': float(scale_factor),
        'crop_top': int(round(crop_top_y)),
        'crop_bottom': int(round(crop_bottom_y)),
        'crop_left': int(round(crop_left_x)),
        'crop_right': int(round(crop_right_x)),
        'final_photo_width_px': target_width,
        'final_photo_height_px': target_height,
        'achieved_head_height_px': int(round(achieved_head_height_px)),
        'achieved_eye_level_from_top_px': int(round(final_eye_pos_from_crop_top)), # –û—Ç –≤–µ—Ä—Ö–∞ –∫–∞–¥—Ä–∞
        'achieved_eye_level_from_bottom_px': int(round(final_eye_pos_from_bottom_crop)), # –û—Ç –Ω–∏–∑–∞ –∫–∞–¥—Ä–∞
        'achieved_head_top_from_crop_top_px': int(round(final_head_pos_from_crop_top)), # –û—Ç –≤–µ—Ä—Ö–∞ –∫–∞–¥—Ä–∞
        'positioning_success': success,
        'warnings': warnings
    }