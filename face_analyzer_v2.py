# face_analyzer_v2.py
# –ù–û–í–´–ô –ü–û–î–•–û–î: –ü—Ä–æ—Å—Ç–æ–π, –Ω–∞–¥–µ–∂–Ω—ã–π, –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–π

import logging
import numpy as np
from photo_specs import PhotoSpecification

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫ - —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ
ESSENTIAL_FACE_POINTS = {
    'forehead': [10, 151, 9],      # –í–µ—Ä—Ö –ª–±–∞
    'eyes': [33, 133, 362, 263],   # –¶–µ–Ω—Ç—Ä—ã –≥–ª–∞–∑
    'nose_tip': [1, 2],            # –ö–æ–Ω—á–∏–∫ –Ω–æ—Å–∞
    'chin': [152, 175],            # –ù–∏–∑ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞
    'face_outline': [10, 338, 297, 332, 284, 251, 389, 356, 454, 323, 361, 288, 
                     397, 365, 379, 378, 400, 377, 152, 148, 176, 149, 150, 136, 
                     172, 58, 132, 93, 234, 127, 162, 21, 54, 103, 67, 109]
}

class SimpleFaceAnalyzer:
    """–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ª–∏—Ü–∞"""
    
    def __init__(self, landmarks, img_height, img_width):
        self.landmarks = landmarks
        self.img_height = img_height
        self.img_width = img_width
    
    def get_face_bounds(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Ü–∞ —Å –∑–∞–ø–∞—Å–æ–º –Ω–∞ –≤–æ–ª–æ—Å—ã"""
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –∫—Ä–∞–π–Ω–∏–µ —Ç–æ—á–∫–∏
        all_x = []
        all_y = []
        
        for i, landmark in enumerate(self.landmarks.landmark):
            x = landmark.x * self.img_width
            y = landmark.y * self.img_height
            all_x.append(x)
            all_y.append(y)
        
        # –ë–∞–∑–æ–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        face_left = min(all_x)
        face_right = max(all_x)
        face_bottom = max(all_y)
        
        # –î–ª—è –≤–µ—Ä—Ö–∞ –±–µ—Ä–µ–º –º–∏–Ω–∏–º—É–º –∏–∑ —Ç–æ—á–µ–∫ –ª–±–∞
        forehead_points = []
        for idx in ESSENTIAL_FACE_POINTS['forehead']:
            if idx < len(self.landmarks.landmark):
                y = self.landmarks.landmark[idx].y * self.img_height
                forehead_points.append(y)
        
        if forehead_points:
            forehead_top = min(forehead_points)
        else:
            forehead_top = min(all_y)
        
        # –ö–†–ò–¢–ò–ß–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –≤–æ–ª–æ—Å
        # –í–æ–ª–æ—Å—ã –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞—é—Ç 15-25% –æ—Ç –≤—ã—Å–æ—Ç—ã –ª–∏—Ü–∞
        face_height = face_bottom - forehead_top
        hair_margin = face_height * 0.25  # 25% –∑–∞–ø–∞—Å –¥–ª—è –≤–æ–ª–æ—Å
        
        estimated_head_top = forehead_top - hair_margin
        
        # –ì–ª–∞–∑–∞
        eye_points = []
        for idx in ESSENTIAL_FACE_POINTS['eyes']:
            if idx < len(self.landmarks.landmark):
                y = self.landmarks.landmark[idx].y * self.img_height
                eye_points.append(y)
        
        eye_level = np.mean(eye_points) if eye_points else (forehead_top + face_bottom) / 2
        
        return {
            'head_top': estimated_head_top,      # –° —É—á–µ—Ç–æ–º –≤–æ–ª–æ—Å!
            'forehead_top': forehead_top,
            'eye_level': eye_level,
            'chin_bottom': face_bottom,
            'face_left': face_left,
            'face_right': face_right,
            'face_center_x': (face_left + face_right) / 2,
            'face_height_with_hair': face_bottom - estimated_head_top,
            'face_height_visible': face_bottom - forehead_top,
            'hair_margin': hair_margin
        }


def calculate_simple_crop_dimensions(face_landmarks, img_height: int, img_width: int, photo_spec: PhotoSpecification):
    """
    –ù–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú: –ü—Ä–æ—Å—Ç–æ–π, –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π, –Ω–∞–¥–µ–∂–Ω—ã–π
    
    –ü—Ä–∏–Ω—Ü–∏–ø—ã:
    1. –í—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è –≤–æ–ª–æ—Å
    2. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞–¥ –∏–¥–µ–∞–ª—å–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    3. –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    """
    
    analyzer = SimpleFaceAnalyzer(face_landmarks, img_height, img_width)
    bounds = analyzer.get_face_bounds()
    
    logging.info(f"üéØ –ù–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú - –ì—Ä–∞–Ω–∏—Ü—ã –ª–∏—Ü–∞:")
    logging.info(f"   –í–∏–¥–∏–º–æ–µ –ª–∏—Ü–æ: {bounds['face_height_visible']:.1f}px")
    logging.info(f"   –° —É—á–µ—Ç–æ–º –≤–æ–ª–æ—Å: {bounds['face_height_with_hair']:.1f}px")
    logging.info(f"   –ó–∞–ø–∞—Å –Ω–∞ –≤–æ–ª–æ—Å—ã: {bounds['hair_margin']:.1f}px")
    
    # –¶–µ–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ñ–æ—Ç–æ
    target_width = photo_spec.photo_width_px
    target_height = photo_spec.photo_height_px
    
    # –®–ê–ì 1: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Å—à—Ç–∞–±
    # –¶–µ–ª–µ–≤–∞—è –≤—ã—Å–æ—Ç–∞ –≥–æ–ª–æ–≤—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    min_head_height = photo_spec.head_min_px
    max_head_height = photo_spec.head_max_px
    
    # –£–ú–ù–û–ï –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï: –Ω–∞—á–∏–Ω–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    # –≠—Ç–æ –¥–∞—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥–æ–ª–æ–≤—ã –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    target_head_height = min_head_height * 1.1  # +10% –∑–∞–ø–∞—Å –æ—Ç –º–∏–Ω–∏–º—É–º–∞
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ –≥–æ–ª–æ–≤—ã –° –£–ß–ï–¢–û–ú –í–û–õ–û–°
    initial_scale = target_head_height / bounds['face_height_with_hair']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –≥–æ–ª–æ–≤–∞ —Å —Ç–∞–∫–∏–º –º–∞—Å—à—Ç–∞–±–æ–º
    scaled_head_height = bounds['face_height_with_hair'] * initial_scale
    scaled_head_width = (bounds['face_right'] - bounds['face_left']) * initial_scale
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å 10% –∫ —Ä–∞–∑–º–µ—Ä–∞–º –≥–æ–ª–æ–≤—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if scaled_head_height * 1.1 > target_height or scaled_head_width * 1.1 > target_width:
        # –ù–µ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è - —É–º–µ–Ω—å—à–∞–µ–º –º–∞—Å—à—Ç–∞–±
        scale_by_height = target_height / (bounds['face_height_with_hair'] * 1.1)
        scale_by_width = target_width / ((bounds['face_right'] - bounds['face_left']) * 1.1)
        scale_factor = min(scale_by_height, scale_by_width)
        logging.info(f"‚ö†Ô∏è –ì–æ–ª–æ–≤–∞ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º, —É–º–µ–Ω—å—à–∞–µ–º –º–∞—Å—à—Ç–∞–± –¥–æ {scale_factor:.3f}")
    else:
        scale_factor = initial_scale
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥–æ–ª–æ–≤–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
    if bounds['face_height_with_hair'] * scale_factor > max_head_height:
        scale_factor = max_head_height / bounds['face_height_with_hair']
        logging.info(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –≥–æ–ª–æ–≤—ã: {scale_factor:.3f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—à—Ç–∞–± —Ä–∞–∑—É–º–Ω—ã–π
    min_scale = 0.5
    max_scale = 2.0
    
    if scale_factor < min_scale:
        logging.warning(f"Scale {scale_factor:.3f} —Å–ª–∏—à–∫–æ–º –º–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º {min_scale}")
        scale_factor = min_scale
    elif scale_factor > max_scale:
        logging.warning(f"Scale {scale_factor:.3f} —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º {max_scale}")
        scale_factor = max_scale
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥–æ–ª–æ–≤—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    final_head_height_px = bounds['face_height_with_hair'] * scale_factor
    final_head_height_mm = final_head_height_px / photo_spec.dpi * 25.4  # px to mm
    
    logging.info(f"üìè –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ: {scale_factor:.3f}")
    logging.info(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –≥–æ–ª–æ–≤—ã: {final_head_height_px:.1f}px ({final_head_height_mm:.1f}mm)")
    logging.info(f"   –¢—Ä–µ–±—É–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {min_head_height}px-{max_head_height}px ({min_head_height/photo_spec.dpi*25.4:.1f}mm-{max_head_height/photo_spec.dpi*25.4:.1f}mm)")
    
    # –®–ê–ì 2: –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    scaled_head_top = bounds['head_top'] * scale_factor
    scaled_chin_bottom = bounds['chin_bottom'] * scale_factor
    scaled_eye_level = bounds['eye_level'] * scale_factor
    scaled_face_center_x = bounds['face_center_x'] * scale_factor
    scaled_face_height = bounds['face_height_with_hair'] * scale_factor
    
    # –®–ê–ì 3: –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≥–ª–∞–∑–∞–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if photo_spec.eye_min_from_bottom_px and photo_spec.eye_max_from_bottom_px:
        # –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≥–ª–∞–∑ - –¶–ï–ù–¢–† –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        target_eye_from_bottom = (photo_spec.eye_min_from_bottom_px + photo_spec.eye_max_from_bottom_px) / 2
        target_eye_from_top = target_height - target_eye_from_bottom
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ –≥–ª–∞–∑–∞–º
        crop_top = scaled_eye_level - target_eye_from_top
        
        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è –ª–∏ –≥–æ–ª–æ–≤–∞
        head_margin_top = scaled_head_top - crop_top
        head_margin_bottom = (crop_top + target_height) - scaled_chin_bottom
        
        if head_margin_top < 10:  # –ú–µ–Ω—å—à–µ 10px –æ—Ç –∫—Ä–∞—è - –æ–ø–∞—Å–Ω–æ!
            # –°–¥–≤–∏–≥–∞–µ–º –≤–Ω–∏–∑, —á—Ç–æ–±—ã –≥–æ–ª–æ–≤–∞ –ø–æ–º–µ—Å—Ç–∏–ª–∞—Å—å
            needed_margin = 20  # –ú–∏–Ω–∏–º—É–º 20px –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
            shift_down = needed_margin - head_margin_top
            crop_top = scaled_head_top - needed_margin
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–π–¥–µ–º –ª–∏ –º—ã –∑–∞ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
            new_eye_from_bottom = target_height - (scaled_eye_level - crop_top)
            if photo_spec.eye_min_from_bottom_px and new_eye_from_bottom < photo_spec.eye_min_from_bottom_px:
                # –ö–æ–º–ø—Ä–æ–º–∏—Å—Å: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –æ—Ç—Å—Ç—É–ø
                crop_top = scaled_head_top - 10
                logging.warning(f"‚ö†Ô∏è –ö–æ–º–ø—Ä–æ–º–∏—Å—Å: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É 10px –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –≥–ª–∞–∑–∞–º")
            else:
                logging.warning(f"–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –≥–æ–ª–æ–≤—ã, —Å–¥–≤–∏–≥ –≤–Ω–∏–∑ –Ω–∞ {shift_down:.1f}px")
    else:
        # –ù–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –≥–ª–∞–∑–∞–º - –ø—Ä–æ—Å—Ç–æ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å —Ö–æ—Ä–æ—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º
        # –û—Å—Ç–∞–≤–ª—è–µ–º 10% –≤—ã—Å–æ—Ç—ã —Ñ–æ—Ç–æ –∫–∞–∫ –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        top_margin = target_height * 0.10
        crop_top = scaled_head_top - top_margin
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫—Ä–æ–ø–∞
    crop_bottom = crop_top + target_height
    crop_left = scaled_face_center_x - (target_width / 2)
    crop_right = crop_left + target_width
    
    # –®–ê–ì 4: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—Ü –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    scaled_img_height = img_height * scale_factor
    scaled_img_width = img_width * scale_factor
    
    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
    if crop_top < 0:
        # –°–¥–≤–∏–≥–∞–µ–º –≤–Ω–∏–∑
        crop_bottom -= crop_top
        crop_top = 0
        logging.warning("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: —Å–¥–≤–∏–≥ –≤–Ω–∏–∑ –∏–∑-–∑–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≤–µ—Ä—Ö")
    
    if crop_bottom > scaled_img_height:
        # –°–¥–≤–∏–≥–∞–µ–º –≤–≤–µ—Ä—Ö
        crop_top -= (crop_bottom - scaled_img_height)
        crop_bottom = scaled_img_height
        logging.warning("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: —Å–¥–≤–∏–≥ –≤–≤–µ—Ä—Ö –∏–∑-–∑–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –Ω–∏–∑")
    
    # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
    if crop_left < 0:
        crop_right -= crop_left
        crop_left = 0
    
    if crop_right > scaled_img_width:
        crop_left -= (crop_right - scaled_img_width)
        crop_right = scaled_img_width
    
    # –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
    final_head_position = scaled_head_top - crop_top
    final_chin_position = scaled_chin_bottom - crop_top
    final_eye_position = scaled_eye_level - crop_top
    final_eye_from_bottom = target_height - final_eye_position
    
    logging.info(f"üìç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø:")
    logging.info(f"   –ì–æ–ª–æ–≤–∞ –æ—Ç –≤–µ—Ä—Ö–∞: {final_head_position:.1f}px ({final_head_position/target_height*100:.1f}%)")
    logging.info(f"   –ü–æ–¥–±–æ—Ä–æ–¥–æ–∫: {final_chin_position:.1f}px")
    logging.info(f"   –ì–ª–∞–∑–∞ –æ—Ç –Ω–∏–∑–∞: {final_eye_from_bottom:.1f}px")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    success = True
    warnings = []
    
    if final_head_position < 5:
        warnings.append("‚ö†Ô∏è –ì–æ–ª–æ–≤–∞ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö–Ω–µ–º—É –∫—Ä–∞—é!")
        success = False
    
    if final_chin_position > target_height:
        warnings.append("‚ö†Ô∏è –ü–æ–¥–±–æ—Ä–æ–¥–æ–∫ –æ–±—Ä–µ–∑–∞–Ω!")
        success = False
    
    if photo_spec.eye_min_from_bottom_px and photo_spec.eye_max_from_bottom_px:
        if not (photo_spec.eye_min_from_bottom_px <= final_eye_from_bottom <= photo_spec.eye_max_from_bottom_px):
            warnings.append(f"‚ö†Ô∏è –ì–ª–∞–∑–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {final_eye_from_bottom:.1f}px")
            # –≠—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
    
    if warnings:
        for w in warnings:
            logging.warning(w)
    else:
        logging.info("‚úÖ –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
    
    # –í–∞–∂–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è achieved_head_height_px
    # –ù—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –≤–∏–¥–∏–º—É—é –≤—ã—Å–æ—Ç—É –≥–æ–ª–æ–≤—ã –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –∫—Ä–æ–ø–µ
    visible_head_height = min(scaled_chin_bottom - crop_top, target_height) - max(scaled_head_top - crop_top, 0)
    
    return {
        'scale_factor': float(scale_factor),
        'crop_top': int(round(crop_top)),
        'crop_bottom': int(round(crop_bottom)),
        'crop_left': int(round(crop_left)),
        'crop_right': int(round(crop_right)),
        'final_photo_width_px': target_width,
        'final_photo_height_px': target_height,
        'achieved_head_height_px': int(round(visible_head_height)),
        'achieved_eye_level_from_top_px': int(round(final_eye_position)),
        'positioning_success': success,
        'warnings': warnings
    }