#!/usr/bin/env python3
"""–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ–≤—ã"""

import os
import cv2
import numpy as np
import logging
from face_analyzer_basic import calculate_basic_crop as calculate_crop_dimensions
from photo_specs import get_photo_specification
import mediapipe as mp

# –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.DEBUG, format='%(levelname)s: %(message)s')

def test_improved_positioning():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å IMG_5520"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø")
    print("="*70)
    
    image_path = "tests/IMG_5520.JPG"
    if not os.path.exists(image_path):
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
    spec = get_photo_specification("US", "Visa Lottery")
    if not spec:
        print("‚ùå –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print(f"üìã –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: {spec.country_code} {spec.document_name}")
    print(f"üìè –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≥–æ–ª–æ–≤–µ: {spec.head_min_mm}-{spec.head_max_mm}–º–º")
    print(f"üëÅÔ∏è  –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≥–ª–∞–∑–∞–º: {spec.eye_min_from_bottom_mm}-{spec.eye_max_from_bottom_mm}–º–º –æ—Ç –Ω–∏–∑–∞")
    print(f"üéØ –¶–µ–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {spec.photo_width_px}x{spec.photo_height_px}px")
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = cv2.imread(image_path)
    img_height, img_width = img.shape[:2]
    print(f"üìê –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img_width}x{img_height}px")
    
    # –ü–æ–ª—É—á–∏—Ç—å landmarks
    face_mesh = mp.solutions.face_mesh.FaceMesh(
        max_num_faces=1,
        refine_landmarks=True,
        min_detection_confidence=0.5,
        min_tracking_confidence=0.5
    )
    
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = face_mesh.process(img_rgb)
    
    if not results.multi_face_landmarks:
        print("‚ùå –õ–∏—Ü–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        return
    
    face_landmarks = results.multi_face_landmarks[0]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
    print(f"\nüîß –†–ê–°–ß–ï–¢ –û–ë–†–ï–ó–ö–ò –° –£–õ–£–ß–®–ï–ù–ù–´–ú –ê–õ–ì–û–†–ò–¢–ú–û–ú...")
    try:
        crop_data = calculate_crop_dimensions(face_landmarks, img_height, img_width, spec)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê:")
        print(f"   –ú–∞—Å—à—Ç–∞–±: {crop_data['scale_factor']:.3f}")
        print(f"   –û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏: top={crop_data['crop_top']}, bottom={crop_data['crop_bottom']}")
        print(f"   –û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏: left={crop_data['crop_left']}, right={crop_data['crop_right']}")
        print(f"   –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è –≤—ã—Å–æ—Ç–∞ –≥–æ–ª–æ–≤—ã: {crop_data['achieved_head_height_px']}px")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º–º
        mm_per_pixel = spec.photo_height_mm / spec.photo_height_px
        achieved_head_mm = crop_data['achieved_head_height_px'] * mm_per_pixel
        achieved_eye_mm = (spec.photo_height_px - crop_data['achieved_eye_level_from_top_px']) * mm_per_pixel
        
        print(f"\nüìè –ò–ó–ú–ï–†–ï–ù–ò–Ø –í –ú–ú:")
        print(f"   –í—ã—Å–æ—Ç–∞ –≥–æ–ª–æ–≤—ã: {achieved_head_mm:.1f}–º–º (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: {spec.head_min_mm}-{spec.head_max_mm}–º–º)")
        print(f"   –ì–ª–∞–∑–∞ –æ—Ç –Ω–∏–∑–∞: {achieved_eye_mm:.1f}–º–º (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: {spec.eye_min_from_bottom_mm}-{spec.eye_max_from_bottom_mm}–º–º)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        head_compliant = spec.head_min_mm <= achieved_head_mm <= spec.head_max_mm
        eye_compliant = spec.eye_min_from_bottom_mm <= achieved_eye_mm <= spec.eye_max_from_bottom_mm
        
        print(f"\n‚úÖ‚ùå –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï:")
        print(f"   –í—ã—Å–æ—Ç–∞ –≥–æ–ª–æ–≤—ã: {'‚úÖ' if head_compliant else '‚ùå'}")
        print(f"   –ü–æ–∑–∏—Ü–∏—è –≥–ª–∞–∑: {'‚úÖ' if eye_compliant else '‚ùå'}")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—Å—Ç—É–ø–æ–≤
        scale_factor = crop_data['scale_factor']
        scaled_height = int(img_height * scale_factor)
        scaled_width = int(img_width * scale_factor)
        
        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –≥–æ–ª–æ–≤—ã –≤ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≥–æ–ª–æ–≤—ã
        forehead_points = [10, 151, 9, 8, 7]
        chin_points = [175, 18, 175, 200, 199]
        
        forehead_y = min([face_landmarks.landmark[i].y * img_height for i in forehead_points])
        chin_y = max([face_landmarks.landmark[i].y * img_height for i in chin_points])
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        scaled_forehead_y = forehead_y * scale_factor
        scaled_chin_y = chin_y * scale_factor
        
        # –ü–æ–∑–∏—Ü–∏–∏ –≤ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        head_top_in_crop = scaled_forehead_y - crop_data['crop_top']
        head_bottom_in_crop = scaled_chin_y - crop_data['crop_top']
        
        # –û—Ç—Å—Ç—É–ø—ã –≤ –º–º
        top_margin_mm = head_top_in_crop * mm_per_pixel
        bottom_margin_mm = (spec.photo_height_px - head_bottom_in_crop) * mm_per_pixel
        
        print(f"\nüìê –û–¢–°–¢–£–ü–´:")
        print(f"   –û—Ç –≤–µ—Ä—Ö–∞: {top_margin_mm:.1f}–º–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 2.0-6.0–º–º)")
        print(f"   –û—Ç –Ω–∏–∑–∞: {bottom_margin_mm:.1f}–º–º")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤
        margin_ok = 2.0 <= top_margin_mm <= 6.0
        print(f"   –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É: {'‚úÖ' if margin_ok else '‚ùå'}")
        
        if not margin_ok:
            if top_margin_mm < 2.0:
                print("   ‚ö†Ô∏è  –û—Ç—Å—Ç—É–ø —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π - –≥–æ–ª–æ–≤–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω–∞")
            else:
                print("   ‚ö†Ô∏è  –û—Ç—Å—Ç—É–ø —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π - –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞")
        
        print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        all_compliant = head_compliant and eye_compliant and margin_ok
        print(f"   –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: {'‚úÖ' if all_compliant else '‚ùå'}")
        
        return crop_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    test_improved_positioning()